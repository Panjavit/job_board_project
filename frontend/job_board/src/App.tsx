import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import Card from './components/Card';
import FilterSection from './components/FilterSection';
import api from './services/api';
import { useAuth } from './context/AuthContext';
import { Filter } from 'lucide-react';
import LoginAlertModal from './components/LoginAlertModal';

// Interface ‡∏ô‡∏µ‡πâ‡∏Ñ‡∏ß‡∏£‡∏à‡∏∞‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà Backend ‡∏™‡πà‡∏á‡∏°‡∏≤‡πÉ‡∏´‡πâ‡∏à‡∏£‡∏¥‡∏á‡πÜ
interface StudentProfile {
    id: string;
    studentCode: string | null;
    fullName: string;
    desiredPosition: string | null;
    internshipApplications: {
        internshipType: string;
        startDate: string;
        endDate: string;
    }[];
    studyYear: number | null;
    major: string | null;
    skills: { skill: { name: string } }[];
    updatedAt: string;
    profileImageUrl: string | null;
}

function App() {
    const [students, setStudents] = useState<StudentProfile[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [filters, setFilters] = useState({
        position: '',
        studyYear: '',
        internshipType: '',
    });
    const [sortBy, setSortBy] = useState('desc');
    
    // State ‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô "‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏∞‡∏ï‡∏∏‡πâ‡∏ô" ‡πÉ‡∏´‡πâ useEffect ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
    const [searchTrigger, setSearchTrigger] = useState(0);

    const { isAuthenticated, user } = useAuth();
    const navigate = useNavigate();

    // useEffect ‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    // ‡πÅ‡∏•‡∏∞‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠:
    // 1. ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
    // 2. ‡∏Ñ‡πà‡∏≤ sortBy ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô (‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Dropdown)
    // 3. ‡∏Ñ‡πà‡∏≤ searchTrigger ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô (‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤)
    useEffect(() => {
        const fetchStudents = async () => {
            setIsLoading(true);
            const params = new URLSearchParams();
            
            // ‡∏ô‡∏≥‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å filters ‡πÅ‡∏•‡∏∞ sortBy ‡∏°‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô query string
            if (filters.position) params.append('position', filters.position);
            if (filters.studyYear) params.append('studyYear', filters.studyYear);
            if (filters.internshipType) params.append('internshipType', filters.internshipType);
            params.append('sort', sortBy);

            try {
                const response = await api.get(`/students?${params.toString()}`);
                setStudents(response.data.data || []);
            } catch (error) {
                console.error("Failed to fetch students:", error);
                setStudents([]);
            } finally {
                setIsLoading(false);
            }
        };

        fetchStudents();
    }, [sortBy, searchTrigger]); // üî¥ ‡∏à‡∏∏‡∏î‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡πÉ‡∏´‡πâ useEffect ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠ 2 ‡∏Ñ‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πà‡∏° "‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤" ‡πÉ‡∏ô FilterSection
    const handleSearch = () => {
        setSearchTrigger(prev => prev + 1); // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏∞‡∏ï‡∏∏‡πâ‡∏ô useEffect
    };

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πå‡∏î
    const handleCardClick = (studentId: string) => {
    if (isAuthenticated) {
        if (user?.role === 'COMPANY') {
            // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô COMPANY ‡πÉ‡∏´‡πâ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤
            navigate(`/students/${studentId}`);
        } else {
            // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô role ‡∏≠‡∏∑‡πà‡∏ô (‡πÄ‡∏ä‡πà‡∏ô CANDIDATE) ‡πÉ‡∏´‡πâ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
            alert('‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô');
        }
    } else {
        setIsModalOpen(true);
    }
};

    return (
        <div className="w-full">
            <FilterSection
                filters={filters}
                setFilters={setFilters}
                onSearch={handleSearch}
            />
            <section className="w-full p-16">
                <div className="px-6 py-4">
                    <div className="flex items-center justify-between">
                        <h2 className="ml-9 text-3xl font-bold text-black">
                            ‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏ù‡∏∂‡∏Å‡∏á‡∏≤‡∏ô
                        </h2>
                        <div className="mr-9 flex items-center gap-2 rounded-md border-2 bg-black px-4 py-2 text-white">
                            <Filter className="h-4 w-4" />
                            <select 
                                className="bg-black text-white focus:outline-none"
                                value={sortBy}
                                // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤ ‡πÉ‡∏´‡πâ setSortBy ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
                                onChange={(e) => setSortBy(e.target.value)}
                            >
                                <option value="desc">‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏° : ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î</option>
                                <option value="asc">‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏° : ‡πÄ‡∏Å‡πà‡∏≤‡∏™‡∏∏‡∏î</option>
                            </select>
                        </div>
                    </div>
                </div>

                {isLoading ? (
                    <p className="mt-8 text-center">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤...</p>
                ) : (
                    <div className="mt-8 grid grid-cols-1 gap-8 sm:grid-cols-2 xl:grid-cols-3">
                        {students.length > 0 ? (
                            students.map(student => (
                                <Card
                                    key={student.id}
                                    student={student}
                                    onCardClick={() => handleCardClick(student.id)}
                                />
                            ))
                        ) : (
                            <p className="col-span-full mt-8 text-center text-gray-500">
                                ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
                            </p>
                        )}
                    </div>
                )}
            </section>
            <LoginAlertModal
                isOpen={isModalOpen}
                onClose={() => setIsModalOpen(false)}
            />
        </div>
    );
}

export default App;