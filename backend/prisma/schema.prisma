// 1. กำหนดชนิดของฐานข้อมูล
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 2. กำหนดให้ Prisma สร้าง Client สำหรับ JavaScript
generator client {
  provider = "prisma-client-js"
}

// 3. ออกแบบ Models

model User {
  id               String            @id @default(cuid())
  email            String            @unique
  password         String?
  role             Role
  authProvider     String            @default("local")
  socialId         String?           @unique
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  candidateProfile CandidateProfile?
  companyProfile   CompanyProfile?
}

model CandidateProfile {
  id                String        @id @default(cuid())
  studentCode       String?       @unique
  fullName          String    // เทียบเท่า name
  contactEmail      String    // เทียบเท่า email
  phoneNumber       String?   // เทียบเท่า phone
  desiredPosition   String?   // เทียบเท่า position
  bio               String?   @db.Text // เทียบเท่า about
  lineUserId        String?
  major             String?       // (แก้ไข) เพิ่มฟิลด์สำหรับเก็บ "สาขาวิชา"
  studyYear         Int?          // (แก้ไข) เพิ่มฟิลด์สำหรับเก็บ "ชั้นปี" เป็นตัวเลข
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  nickname          String?   // เพิ่ม: ชื่อเล่น
  gender            String?   // เพิ่ม: เพศ
  dateOfBirth       DateTime? // เพิ่ม: วันเกิด (เก็บเป็น DateTime)
  profileImageUrl   String?   // เพิ่ม: สำหรับ profileImage
  videoUrl          String?   // เปลี่ยนชื่อจาก youtubeIntroLink
  videoDescription  String?
  experience        String?    @db.Text // เพิ่ม: สำหรับ experience (ข้อความสรุป)
  education         String?    @db.Text // เพิ่ม: สำหรับ education (ข้อความสรุป)
  projects          String?    @db.Text // เพิ่ม: สำหรับ projects
  achievements      String?    @db.Text // เพิ่ม: สำหรับ achievements

  // ความสัมพันธ์
  user      User          @relation(fields: [userId], references: [id])
  userId    String        @unique
  skills    UserSkill[]
  interests Interaction[] @relation("StudentInteractions")
  workHistory WorkHistory[] // นักศึกษาหนึ่งคนมีได้หลายประวัติการทำงาน
  certificateFiles CertificateFile[]
  contactFiles     ContactFile[]
  internshipApplications InternshipApplication[]
}

model CompanyProfile {
  id                  String        @id @default(cuid())
  companyName         String
  about               String?
  contactInstructions String
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  // ความสัมพันธ์
  user      User          @relation(fields: [userId], references: [id])
  userId    String        @unique
  interests Interaction[] @relation("CompanyInteractions")
  internshipApplications InternshipApplication[]
}

model Skill {
  id    String      @id @default(cuid())
  name  String      @unique
  users UserSkill[]
}

model UserSkill {
  id                 String           @id @default(cuid())
  rating             Int
  candidateProfile   CandidateProfile @relation(fields: [candidateProfileId], references: [id])
  candidateProfileId String
  skill              Skill            @relation(fields: [skillId], references: [id])
  skillId            String

  @@unique([candidateProfileId, skillId])
}

model Interaction {
  id                  String   @id @default(cuid())
  contactInstructions String
  createdAt           DateTime @default(now())

  // ความสัมพันธ์
  company          CompanyProfile @relation("CompanyInteractions", fields: [companyProfileId], references: [id])
  companyProfileId String
  student          CandidateProfile @relation("StudentInteractions", fields: [studentProfileId], references: [id])
  studentProfileId String
  @@unique([companyProfileId, studentProfileId])
}

//เพิ่ม Model ใหม่สำหรับเก็บประวัติการทำงาน
model WorkHistory {
  id          String   @id @default(cuid())
  companyName String   // ชื่อบริษัท
  position    String   // ตำแหน่ง
  startDate   DateTime // วันที่เริ่มงาน
  endDate     DateTime? // วันที่สิ้นสุด (อาจจะยังทำอยู่)
  description String?  // รายละเอียดงาน

  //ความสัมพันธ์: ประวัตินี้เป็นของนักศึกษาคนไหน
  candidate   CandidateProfile @relation(fields: [candidateProfileId], references: [id])
  candidateProfileId String
}

// โมเดลสำหรับเก็บไฟล์ Certificate
  model CertificateFile {
  id                 String           @id @default(cuid())
  name               String
  url                String
  type               String
  description        String?
  candidate          CandidateProfile @relation(fields: [candidateProfileId], references: [id], onDelete: Cascade)
  candidateProfileId String
}

// โมเดลสำหรับเก็บไฟล์ Contact (เช่น Resume)
  model ContactFile {
  id                 String           @id @default(cuid())
  name               String
  url                String
  type               String
  candidate          CandidateProfile @relation(fields: [candidateProfileId], references: [id], onDelete: Cascade)
  candidateProfileId String
}

model InternshipApplication {
  id                 String   @id @default(cuid())
  positionOfInterest String
  universityName     String
  startDate          DateTime
  endDate            DateTime
  reason             String    @db.Text
  status             ApplicationStatus @default(PENDING) // สถานะใบสมัคร
  internshipType     InternshipType    @default(INTERNSHIP)

  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // ความสัมพันธ์: ใบสมัครนี้เป็นของใคร และสมัครไปที่บริษัทไหน
  candidate          CandidateProfile @relation(fields: [candidateProfileId], references: [id])
  candidateProfileId String

  company            CompanyProfile   @relation(fields: [companyProfileId], references: [id])
  companyProfileId   String

  @@unique([candidateProfileId, companyProfileId]) // จำกัดให้ 1 คนสมัคร 1 บริษัทได้ครั้งเดียว
}

enum ApplicationStatus {
  PENDING
  REVIEWED
  ACCEPTED
  REJECTED
}

enum Role {
  CANDIDATE
  COMPANY
  ADMIN
}

enum InternshipType {
  FULL_TIME
  PART_TIME
  INTERNSHIP
}