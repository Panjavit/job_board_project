// 1. กำหนดชนิดของฐานข้อมูล
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 2. กำหนดให้ Prisma สร้าง Client สำหรับ JavaScript
generator client {
  provider = "prisma-client-js"
}

// 3. ออกแบบ Models

model User {
  id               String            @id @default(cuid())
  email            String            @unique
  password         String?
  role             Role
  authProvider     String            @default("local")
  socialId         String?           @unique
  lineUserId       String?           @unique
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  candidateProfile CandidateProfile?
  companyProfile   CompanyProfile?
  passwordResetToken   String?
  passwordResetExpires DateTime?
}

model CandidateProfile {
  id                String        @id @default(cuid())
  studentCode       String?       @unique
  fullName          String
  contactEmail      String
  phoneNumber       String?
  desiredPosition   String?
  bio               String?   @db.Text
  lineUserId        String?
  major             String?
  studyYear         Int?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  nickname          String?
  gender            String?
  dateOfBirth       DateTime?
  profileImageUrl   String?
  videoUrl          String?
  videoDescription  String?
  experience        String?    @db.Text
  education         String?    @db.Text
  projects          String?    @db.Text
  achievements      String?    @db.Text
  portfolioUrl      String?
  positionOfInterest String?
  universityName     String?
  startDate          DateTime?
  endDate            DateTime?
  reason             String?    @db.Text
  internshipType     InternshipType? @default(INTERNSHIP)

  // ความสัมพันธ์
  user      User          @relation(fields: [userId], references: [id])
  userId    String        @unique
  skills    UserSkill[]
  interests Interaction[] @relation("StudentInteractions")
  workHistory WorkHistory[]
  certificateFiles CertificateFile[]
  contactFiles     ContactFile[]
}

model CompanyProfile {
  id                  String        @id @default(cuid())
  companyName         String
  about               String?
  location            String?
  logoUrl             String?
  recruiterName       String?
  recruiterPosition   String? 
  additionalContactInfo String? @db.Text
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  province             String? // จังหวัด
  registrationNumber   String? // เลขทะเบียนนิติบุคคล
  legalName            String? // ชื่อนิติบุคคล
  companyType          String? // ประเภทนิติบุคคล
  businessTypeName     String? // ชื่อประเภทธุรกิจ
  registeredCapital    Float?  // ทุนจดทะเบียน
  videoUrl           String?
  workArrangement  WorkArrangement? @default(ONSITE)
  workingDays      String?
  workingHours     String?
  workPolicy       String? @db.Text

  // ความสัมพันธ์
  user      User          @relation(fields: [userId], references: [id])
  userId    String        @unique
  interests Interaction[] @relation("CompanyInteractions")
  emails              CompanyEmail[] 
  phones              CompanyPhone[] 
}

model Skill {
  id    String      @id @default(cuid())
  name  String      @unique
  users UserSkill[]
}

model UserSkill {
  id                 String           @id @default(cuid())
  rating             Int
  candidateProfile   CandidateProfile @relation(fields: [candidateProfileId], references: [id])
  candidateProfileId String
  skill              Skill            @relation(fields: [skillId], references: [id])
  skillId            String

  @@unique([candidateProfileId, skillId])
}

model Interaction {
  id                  String   @id @default(cuid())
  createdAt           DateTime @default(now())

  // ความสัมพันธ์
  company          CompanyProfile @relation("CompanyInteractions", fields: [companyProfileId], references: [id])
  companyProfileId String
  student          CandidateProfile @relation("StudentInteractions", fields: [studentProfileId], references: [id])
  studentProfileId String
  @@unique([companyProfileId, studentProfileId])
}

//Model สำหรับเก็บประวัติการทำงาน
model WorkHistory {
  id          String   @id @default(cuid())
  companyName String   // ชื่อบริษัท
  position    String   // ตำแหน่ง
  startDate   DateTime // วันที่เริ่มงาน
  endDate     DateTime? // วันที่สิ้นสุด (อาจจะยังทำอยู่)
  description String?  // รายละเอียดงาน

  //ความสัมพันธ์: ประวัตินี้เป็นของนักศึกษาคนไหน
  candidate   CandidateProfile @relation(fields: [candidateProfileId], references: [id])
  candidateProfileId String
}

// โมเดลสำหรับเก็บไฟล์ Certificate
  model CertificateFile {
  id                 String           @id @default(cuid())
  name               String
  url                String
  type               String
  description        String?
  candidate          CandidateProfile @relation(fields: [candidateProfileId], references: [id], onDelete: Cascade)
  candidateProfileId String
}

// โมเดลสำหรับเก็บไฟล์ Contact (เช่น Resume)
  model ContactFile {
  id                 String           @id @default(cuid())
  name               String
  url                String
  type               String
  candidate          CandidateProfile @relation(fields: [candidateProfileId], references: [id], onDelete: Cascade)
  candidateProfileId String
}

enum Role {
  CANDIDATE
  COMPANY
  ADMIN
}

enum InternshipType {
  FULL_TIME
  PART_TIME
  INTERNSHIP
}

enum WorkArrangement {
  ONSITE
  HYBRID
  REMOTE
}

model CompanyEmail {
  id        String         @id @default(cuid())
  email     String
  company   CompanyProfile @relation(fields: [companyProfileId], references: [id])
  companyProfileId String
}

model CompanyPhone {
  id        String         @id @default(cuid())
  phone     String
  company   CompanyProfile @relation(fields: [companyProfileId], references: [id])
  companyProfileId String
}